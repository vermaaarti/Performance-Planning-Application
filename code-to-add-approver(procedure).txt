

----------------------------------------------code to AAD authentication---------------------------------------------------------------
create table employee_aarti(
employeeid int primary key not null, 
employeemail nvarchar(255) UNIQUE,
employeename nvarchar(255),
)


create table role_aarti(
roleid int primary key not null,
rolename nvarchar(40)
)

create table employeeRole_aarti(
employeeroleid int primary key not null,
employeeid int,
roleid int,
FOREIGN KEY (employeeid) REFERENCES employee_aarti(employeeid),
FOREIGN KEY (roleid) REFERENCES role_aarti(roleid)
)


insert into employee_aarti(employeeid, employeemail, employeename)
values

(1, 'aarti_verma@amicusglobal.com', 'Aarti'),
(2, 'chandan_soni@amicusglobal.com', 'Chandan'),
(3, 'rachana_k@amicusglobal.com', 'Rachana'),
(4, 'vivek_purbey@amicusglobal.com', 'Vivek'),
(5, 'ruchir_verma@amicusglobal.com', 'Ruchir'),
(6, 'ravi_kukreja@amicusglobal.com', 'Ravi')






insert into role_aarti(roleid,rolename)
values
(1, 'admin'),
(2, 'planner'),
(3, 'approver')



  insert into employeeRole_aarti(employeeroleid, employeeid, roleid)
values
(1, 1, 1),
(2, 2, 3),
(3, 3, 3),
(4, 4, 2),
(5, 5, 3),
(6, 6, 2),
(7, 2, 2),
(8, 4, 3)



    select * from employee_aarti

    select * from role_aarti

    select * from employeeRole_aarti


  --  drop table employee_aarti
   --  drop table role_aarti
 --  drop table employeeRole_aarti



 --------------------------------------procedure to AAD fetching role claim--------------------------------------------------------

-- creating stored procedure

CREATE PROCEDURE EmployeeRolesInfos

 @Email NVARCHAR(255)
 
 AS
  BEGIN
   
 SELECT  E.employeemail, E.employeename, R.rolename
    FROM employee_aarti AS E
    INNER JOIN employeeRole_aarti AS ER ON E.employeeid = ER.employeeid
    INNER JOIN role_aarti AS R ON ER.roleid = R.roleid
	where E.employeemail = @Email

  END;
  
  

 --  EXEC EmployeeRolesInfos @Email = 'chandan_soni@amicusglobal.com'

/* 1	aarti_verma@amicusglobal.com	Aarti       admin
   2	chandan_soni@amicusglobal.com	Chandan     approver & planner  
         ruchir                                     approver
		  ravi                                        planner
		  rachana                                     approver
		  vivek                                       planner  & approver

*/
 -------------------------------------------AAD part ends here --------------------------------------------------------------------



 --/////////////////////////////////////////////table////////////////////////////////////////////////////////////////////////////////////////////

CREATE TABLE approver_aarti(
approverId INT IDENTITY(1,1) PRIMARY KEY,
approverName NVARCHAR(255)
)

insert into approver_aarti( approverName)
values
('Ruchir'),
('Rachana'),
('Chandan')






select * from approver_aarti

drop table approver_aarti


drop table ApprovalTask_aarti

drop table EmployeeMaster_arti


CREATE TABLE EmployeeMaster_arti (
    EmployeeId INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeEmail NVARCHAR(255),
    EmployeeName NVARCHAR(255),
    ManagerId INT,
    PlannerId INT,
	ApproverId INT,
    Department NVARCHAR(255),
    IsAdmin INT,
    PerformanceRatingId INT,
    PerformanceRating NVARCHAR(255),
    StatusOfPlanning NVARCHAR(255),
	performanceChallenges NVARCHAR(255),
    IsEligibleForPlanning INT,
    FOREIGN KEY (ManagerId) REFERENCES EmployeeMaster_arti(EmployeeId),
    FOREIGN KEY (PlannerId) REFERENCES EmployeeMaster_arti(EmployeeId),
	FOREIGN KEY (ApproverId) REFERENCES EmployeeMaster_arti(EmployeeId),
    FOREIGN KEY (PerformanceRatingId) REFERENCES PerformanceRatingMaster_arti(PerformanceRatingId),
    CONSTRAINT ck_testbool_isadmin CHECK (IsAdmin IN (1, 0, 2)),
    CONSTRAINT ck_testbool_isplneligible CHECK (IsEligibleForPlanning IN (1, 0)),
    CONSTRAINT ck_testbool_depart CHECK (Department IN ('CS', 'IT')),
    CONSTRAINT ck_testbool_perfr CHECK (PerformanceRating IN ('Poor', 'Satisfactory', 'Good', 'Excellent')),
	CONSTRAINT ck_testbool_perch CHECK (performanceChallenges IN ('Training Required', 'Was/Is in PIP', 'No certification', 'No challenges'))
);


insert into EmployeeMaster_arti(EmployeeEmail, EmployeeName, ManagerId, PlannerId, ApproverId, Department, IsAdmin, PerformanceRatingId, PerformanceRating, StatusOfPlanning, performanceChallenges, IsEligibleForPlanning)  
values
('aarti_verma@amicusglobal.com', 'Aarti', 2, 5, 5, 'CS', 1, 1,'Poor', 'draft', 'Training Required', 0),
('ruchir_verma@amicusglobal.com', 'Ruchir', 4, 5, 8, 'CS', 0, 2, 'Satisfactory', 'draft','Was/Is in PIP', 1),
('sharma_srishti@amicusglobal.com', 'Srishti', 4, 8, 5, 'IT', 2, 2, 'Poor', 'draft','Training Required', 1),
('ravi_kukreja@amicusglobal.com', 'Ravi', 4, 5, 5, 'CS', 2,  4, 'Excellent', 'draft', 'Was/Is in PIP', 1),
('chandan_soni@amicusglobal.com', 'Chandan',2, 8, 2, 'IT', 2, 4,'Good', 'draft', 'Training Required', 1) ,      
('avartika_verma@amicusglobal.com', 'Avartika', 1, 5 , 5, 'IT', 2, 2, 'Poor', 'draft', 'Was/Is in PIP', 1),
('rachana_k@amicusglobal.com', 'Rachana', 9, 5 , 5, 'CS', 0, 2, 'Good', 'draft', 'Training Required', 1),
('vivek_purbey@amicusglobal.com', 'Vivek', 9, 4 , 5 , 'IT', 2, 3, 'Good', 'draft', 'Was/Is in PIP', 1),
('yash_bakshi@amicusglobal.com', 'Yash', 5, 5, 5, 'CS', 2, 2, 'Good', 'draft', 'Training Required', 1)


/*
      CREATE TABLE ApprovalTask_aarti (
    ApprovalTaskId INT IDENTITY(1,1) PRIMARY KEY,
    EmployeeName NVARCHAR(255),
    EmployeeEmail NVARCHAR(255),
    ManagerId INT,
    PlannerId INT,
    ApproverId INT, 
    Department NVARCHAR(255),
    PerformanceRating NVARCHAR(255),
    StatusOfPlanning NVARCHAR(255),
    performanceChallenges NVARCHAR(255),
    ApprovalStatus NVARCHAR(255),
    CreatedOn datetime DEFAULT GETUTCDATE(),
    FOREIGN KEY (PlannerId) REFERENCES EmployeeMaster_arti(EmployeeId),
    FOREIGN KEY (ManagerId) REFERENCES EmployeeMaster_arti(EmployeeId),
    FOREIGN KEY (ApproverId) REFERENCES EmployeeMaster_arti(EmployeeId),
    CONSTRAINT ck_testbool_depar CHECK (Department IN ('CS', 'IT')),
    CONSTRAINT ck_testbool_perf CHECK (PerformanceRating IN ('Poor', 'Satisfactory', 'Good', 'Excellent')),
    CONSTRAINT ck_testbool_perc CHECK (performanceChallenges IN ('Training Required', 'Was/Is in PIP', 'No certification', 'No challenges'))
);    
       

insert into ApprovalTask_aarti( EmployeeName, EmployeeEmail, ManagerId, PlannerId,  ApproverId, Department, PerformanceRating, StatusOfPlanning, performanceChallenges, ApprovalStatus, CreatedOn)  
values
('Aarti', 'aarti_verma@amicusglobal.com', 1, 1, 1, 'CS', 'Poor', 'InProgress', 'Was/Is in PIP', 'Assigned', GETUTCDATE()),
('Aar' , 'aarti_verma@amicusglobal.com', 2, 2, 2, 'CS', 'Poor', 'InProgress', 'Was/Is in PIP', 'Assigned', GETUTCDATE()),
('Aai' , 'aarti_verma@amicusglobal.com', 3, 3, 3, 'CS', 'Poor', 'InProgress', 'Was/Is in PIP', 'Assigned', GETUTCDATE()),
('Ai' , 'aarti_verma@amicusglobal.com', 7, 7, 7, 'CS', 'Poor', 'InProgress', 'Was/Is in PIP', 'Assigned', GETUTCDATE()),
('Arti' , 'aarti_verma@amicusglobal.com', 8, 8, 8, 'CS', 'Poor', 'InProgress', 'Was/Is in PIP', 'Assigned', GETUTCDATE()),
('Aartiiii', 'aarti_verma@amicusglobal.com', 9, 9, 9, 'CS', 'Poor', 'InProgress', 'Was/Is in PIP', 'Assigned', GETUTCDATE())

*/

CREATE TABLE ApprovalTask_aarti (
    ApprovalTaskId INT IDENTITY(1,1) PRIMARY KEY,
	EmployeeId INT REFERENCES EmployeeMaster_arti(EmployeeId),
	PlannerId INT NOT NULL,
	ApproverId INT NOT NULL,
    ApprovalStatus NVARCHAR(255),
    CreatedOn datetime DEFAULT GETUTCDATE(),
  );




select * from EmployeeMaster_arti


select * from ApprovalTask_aarti 




--//////////////////procedure to get the employees based on admin or planner//////////////////////////////////////////////////////////////////////////////////////////////
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CREATE PROCEDURE [dbo].[procedureToGetEmployeeData_aartiL]
@Email NVARCHAR (255)
AS
BEGIN
    DECLARE @id AS INT;
    DECLARE @isadmin AS INT;
	
    SET @id = (SELECT EmployeeId
               FROM   EmployeeMaster_arti
               WHERE  EmployeeEmail = @Email);
    SET @isadmin = (SELECT TOP 1 IsAdmin
                    FROM   EmployeeMaster_arti
                    WHERE  EmployeeId = @id);
    IF @isadmin = 1
        SELECT EmployeeId,
               EmployeeName,
               EmployeeEmail,
               (SELECT TOP 1 emp2.EmployeeName
                FROM   EmployeeMaster_arti AS emp2
                WHERE  emp1.ManagerId = emp2.EmployeeId) AS ManagerName,
               (SELECT TOP 1 emp3.EmployeeName
                FROM   EmployeeMaster_arti AS emp3
                WHERE  emp1.PlannerId = emp3.EmployeeId) AS PlannerName,
               Department,
               PerformanceRating,
			   performanceChallenges,
               StatusOfPlanning,
			   PlannerId,
			   ApproverId,
			   CreatedOn = GETUTCDATE(),
			   EmployeeId,
			   ApprovalStatus = 'Assigned'

	
        FROM   EmployeeMaster_arti AS emp1;

    ELSE IF @isadmin = 0   --  approver
	SELECT EmployeeId,
               EmployeeName,
               EmployeeEmail,
               (SELECT TOP 1 emp4.EmployeeName
                FROM   EmployeeMaster_arti AS emp4
                WHERE  emp5.ManagerId = emp4.EmployeeId) AS ManagerName,
               (SELECT TOP 1 emp7.EmployeeName
                FROM   EmployeeMaster_arti AS emp7
                WHERE  emp5.PlannerId = emp7.EmployeeId) AS PlannerName,
               Department,
               PerformanceRating,
			   performanceChallenges,
               StatusOfPlanning,
			   PlannerId,
			   ApproverId,
			  CreatedOn = GETUTCDATE(),
			   EmployeeId,
			   ApprovalStatus = 'Assigned'
			
        FROM   EmployeeMaster_arti AS emp5
     --   WHERE  PlannerId = @id;
		WHERE ApproverId = @id;

    ELSE IF  @isadmin = 2          -- planner
        SELECT EmployeeId,
               EmployeeName,
               EmployeeEmail,
               (SELECT TOP 1 emp4.EmployeeName
                FROM   EmployeeMaster_arti AS emp4
                WHERE  emp5.ManagerId = emp4.EmployeeId) AS ManagerName,
               (SELECT TOP 1 emp7.EmployeeName
                FROM   EmployeeMaster_arti AS emp7
                WHERE  emp5.PlannerId = emp7.EmployeeId) AS PlannerName,
               Department,
               PerformanceRating,
			   performanceChallenges,
               StatusOfPlanning,
			   PlannerId,
			   ApproverId,
			  CreatedOn = GETUTCDATE(),
			   EmployeeId,
			   ApprovalStatus = 'Assigned'
			
        FROM   EmployeeMaster_arti AS emp5
        WHERE  PlannerId = @id;
END






--////////////////////procedure to save data on database when submit button is clicked by the planner//////////////////////////////////////////////////////////////////////
--////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



CREATE PROCEDURE [dbo].[ChangeStatusToInProgress]
@JsonEmployee NVARCHAR (MAX)
AS
BEGIN
    CREATE TABLE #TempTable_aarti (
        EmployeeId INT PRIMARY KEY,
        StatusOfPlanning NVARCHAR (255)

    );
    INSERT INTO #TempTable_aarti (EmployeeId, StatusOfPlanning)
    SELECT EmployeeId,
           'InProgress'
    FROM   OPENJSON (@JsonEmployee) WITH (EmployeeId INT '$.EmployeeId');
    UPDATE yt
    SET    yt.StatusOfPlanning = tt.StatusOfPlanning
    FROM   EmployeeMaster_arti AS yt
           INNER JOIN
           #TempTable_aarti AS tt
           ON yt.EmployeeId = tt.EmployeeId;
    DROP TABLE #TempTable_aarti;


END


--////////////////procedure to send the updated array to the database after changing the performance rating  /////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CREATE PROCEDURE [dbo].[SaveEmployeeDatasAsDraft_artiA]
@JsonEmployee NVARCHAR (MAX)
AS
BEGIN
    CREATE TABLE #TempTable_aarti (
        EmployeeId  INT PRIMARY KEY,
        PerformanceRating NVARCHAR (255) ,
		performanceChallenges NVARCHAR (255)

    );
    INSERT INTO #TempTable_aarti (EmployeeId, PerformanceRating, performanceChallenges)
    SELECT EmployeeId,
           PerformanceRating,
		   performanceChallenges
    FROM   OPENJSON (@JsonEmployee) WITH (EmployeeId INT '$.EmployeeId', PerformanceRating NVARCHAR (255) '$.PerformanceRating', performanceChallenges NVARCHAR(255) '$.performanceChallenges');
    UPDATE ema
    SET    ema.PerformanceRating = tt.PerformanceRating ,
	   ema.performanceChallenges = tt.performanceChallenges
    FROM   EmployeeMaster_arti AS ema
           INNER JOIN
           #TempTable_aarti AS tt
           ON ema.EmployeeId = tt.EmployeeId;
    DROP TABLE #TempTable_aarti;
END




--//////////////////////////////////procedure to insert or update employee  ////////////////////////////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


CREATE PROCEDURE [dbo].[InsertOrUpdateEmployee]
    @EmpJson NVARCHAR(MAX)
AS
BEGIN
    DECLARE @EmployeeId AS INT;
    DECLARE @EmployeeName AS NVARCHAR(MAX);
    DECLARE @EmployeeEmail AS NVARCHAR(MAX);
    DECLARE @ManagerName AS NVARCHAR(MAX);
    DECLARE @Department AS NVARCHAR(MAX);
    DECLARE @PlannerName AS NVARCHAR(MAX);
 
    -- Extract values from JSON
    SELECT
        @EmployeeId = EmployeeId,
        @EmployeeName = EmployeeName,
        @EmployeeEmail = EmployeeEmail,
        @ManagerName = ManagerName,
        @Department = Department,
        @PlannerName = PlannerName
    FROM OPENJSON(@EmpJson) WITH (
        EmployeeId INT '$.EmployeeId',
        EmployeeName NVARCHAR(MAX) '$.EmployeeName',
        EmployeeEmail NVARCHAR(MAX) '$.EmployeeEmail',
        ManagerName NVARCHAR(MAX) '$.ManagerName',
        Department NVARCHAR(MAX) '$.Department',
        PlannerName NVARCHAR(MAX) '$.PlannerName'
    );
 
    -- Check if EmployeeId is 0 (add new record) or non-zero (update existing record)
    IF @EmployeeId = 0
    BEGIN
        -- Insert new record
        INSERT INTO EmployeeMaster_arti (EmployeeName, EmployeeEmail, ManagerId, PlannerId, Department, StatusOfPlanning)
        VALUES (
            @EmployeeName,
            @EmployeeEmail,
            NULLIF((SELECT EmployeeId FROM EmployeeMaster_arti WHERE EmployeeName = @ManagerName), 0),
            NULLIF((SELECT EmployeeId FROM EmployeeMaster_arti WHERE EmployeeName = @PlannerName), 0),
            @Department,
            'draft'
        );
    END
    ELSE
    BEGIN
        -- Update existing record
        UPDATE E
        SET
            E.EmployeeName = @EmployeeName,
            E.EmployeeEmail = @EmployeeEmail,
            E.ManagerId = NULLIF((SELECT EmployeeId FROM EmployeeMaster_arti WHERE EmployeeName = @ManagerName), 0),
            E.PlannerId = NULLIF((SELECT EmployeeId FROM EmployeeMaster_arti WHERE EmployeeName = @PlannerName), 0),
            E.Department = @Department
        FROM EmployeeMaster_arti AS E
        WHERE E.EmployeeId = @EmployeeId;
    END
END


--////////////////////////////////////////////////// execute //////////////////////////////////////////////////////////////////////////////////////////////////////////////

DECLARE @json NVARCHAR(MAX) = '{"EmployeeId": 0, "EmployeeName": "Jonathan Doe", "EmployeeEmail": "john@example.com", "ManagerName": "Manager1", "Department": "IT", "PlannerName": "Planner1"}';
 
EXEC [dbo].[InsertOrUpdateEmployee] @EmpJson = @json;


select * from EmployeeMaster_arti






--////////////////////////////////////procedure to add data into the approverTask datatable ///////////////////////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/*
CREATE PROCEDURE [dbo].[AddDataIntoApproverTableT]
    @EmpJson NVARCHAR(MAX),
    @ApproverEmail NVARCHAR(MAX)
AS
BEGIN
    DECLARE @ApproverId INT;
 
    -- Get the ApproverId based on the provided email
    SELECT @ApproverId = EmployeeId FROM EmployeeMaster_arti WHERE EmployeeEmail = @ApproverEmail;
 
    -- Create a temporary table to hold the incoming data
    CREATE TABLE #TempData (EmployeeId INT, PlannerId INT, ApproverId INT);
 
    -- Insert data into the temporary table
    INSERT INTO #TempData (EmployeeId, PlannerId, ApproverId)
    SELECT
        EmployeeId,
        PlannerId,
        ApproverId
    FROM OPENJSON(@EmpJson) WITH (
        EmployeeId INT '$.EmployeeId',
        PlannerId INT '$.PlannerId',
        ApproverId INT '$.ApproverId'
    );
 
    -- Update existing records in ApprovalTask_aarti table
    UPDATE a
    SET ApprovalStatus = 'Assigned'
    FROM ApprovalTask_aarti a
    INNER JOIN #TempData t ON a.EmployeeId = t.EmployeeId
    WHERE a.ApproverId = @ApproverId;
 
    -- Insert new records into ApprovalTask_aarti table
    INSERT INTO ApprovalTask_aarti (EmployeeId, PlannerId, ApproverId, ApprovalStatus, CreatedOn)
    SELECT
        t.EmployeeId,
        t.PlannerId,
        t.ApproverId,
        'Assigned', -- Change to another status if needed for new records
        GETUTCDATE()
    FROM #TempData t
    WHERE NOT EXISTS (
        SELECT 1
        FROM ApprovalTask_aarti a
        WHERE a.EmployeeId = t.EmployeeId
          AND a.ApproverId = @ApproverId
    )
    AND t.ApproverId = @ApproverId; -- Ensure the ApproverId matches
 
    -- Drop the temporary table
    DROP TABLE #TempData;
END
        */

 

 CREATE PROCEDURE [dbo].[AddDataIntoApproverTableU]
    @EmpJson NVARCHAR(MAX),
    @ApproverEmail NVARCHAR(MAX)
AS
BEGIN
    DECLARE @ApproverId INT;
 
    -- Get the ApproverId based on the provided email
    SELECT @ApproverId = EmployeeId
    FROM EmployeeMaster_arti
    WHERE EmployeeEmail = @ApproverEmail;
 
    -- Create a temporary table to hold the incoming data
    CREATE TABLE #TempData (EmployeeId INT, PlannerId INT, ApproverId INT);
 
    -- Insert data into the temporary table
    INSERT INTO #TempData (EmployeeId, PlannerId, ApproverId)
    SELECT EmployeeId, PlannerId, ApproverId
    FROM OPENJSON(@EmpJson) WITH (
        EmployeeId INT '$.EmployeeId',
        PlannerId INT '$.PlannerId',
        ApproverId INT '$.ApproverId'
    );
 
    -- Update existing records in ApprovalTask_aarti table
    UPDATE a
    SET ApprovalStatus = 'Assigned'
    FROM ApprovalTask_aarti a
    INNER JOIN #TempData t ON a.EmployeeId = t.EmployeeId
    WHERE a.ApproverId = @ApproverId;
 
    -- Insert new records into ApprovalTask_aarti table
    INSERT INTO ApprovalTask_aarti (EmployeeId, PlannerId, ApproverId, ApprovalStatus, CreatedOn)
    SELECT t.EmployeeId, t.PlannerId, t.ApproverId, 'Assigned', GETUTCDATE()
    FROM #TempData t
    WHERE NOT EXISTS (
        SELECT 1
        FROM ApprovalTask_aarti a
        WHERE a.EmployeeId = t.EmployeeId AND a.ApproverId = @ApproverId
    );
 
    -- Drop the temporary table
    DROP TABLE #TempData;
END








--///////////////////////////////////////procedure to get the employees based on approver  /////////////////////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


 select * from ApprovalTask_aarti


CREATE PROCEDURE [dbo].[ShowEmployeForApproverM] 
@EmployeeEmail NVARCHAR(MAX) 
AS
BEGIN
    DECLARE @EmployeeId INT;
 
    -- Get EmployeeId from EmployeeMaster table using the provided email
    SET @EmployeeId = (SELECT EmployeeId FROM EmployeeMaster_arti WHERE EmployeeEmail = @EmployeeEmail);
 
    -- Select records from ApprovalTask_aarti based on EmployeeId and ApprovalStatus
    SELECT
        at.ApprovalTaskId,
      --  at.EmployeeId,
		  (SELECT EmployeeName FROM EmployeeMaster_arti WHERE EmployeeId = at.EmployeeId) AS EmployeeName,
        (SELECT EmployeeName FROM EmployeeMaster_arti WHERE EmployeeId = at.PlannerId) AS PlannerName,
        (SELECT EmployeeName FROM EmployeeMaster_arti WHERE EmployeeId = at.ApproverId) AS ApproverName,
        at.ApprovalStatus,
        at.CreatedOn
    FROM ApprovalTask_aarti AS at
    INNER JOIN EmployeeMaster_arti AS emp1 ON at.ApproverId = emp1.EmployeeId


    WHERE at.ApproverId = @EmployeeId AND at.ApprovalStatus = 'Assigned';
END



--/////////////////////////// execute  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

EXEC [dbo].[ShowEmployeForApproverM] @EmployeeEmail = 'chandan_soni@amicusglobal.com';


select * from EmployeeMaster_arti

select * from ApprovalTask_aarti 





 
--///////////////////////////////////procedure to mark approvalStatus as approved and performance rating as completed  ///////////////////////////////////////////////////////////////
--///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
     CREATE PROCEDURE [dbo].[ChangeStatusToApprovedB]
@JsonEmployee NVARCHAR (MAX)
AS
BEGIN
    CREATE TABLE #TempTable_arti (
        ApprovalTaskId INT PRIMARY KEY,
       ApprovalStatus NVARCHAR (255)

    );
    INSERT INTO #TempTable_arti (ApprovalTaskId, ApprovalStatus)
    SELECT ApprovalTaskId,
           'Approved'
    FROM   OPENJSON (@JsonEmployee) WITH (ApprovalTaskId INT '$.ApprovalTaskId');
    UPDATE aprl
    SET    aprl.ApprovalStatus = tta.ApprovalStatus
    FROM   ApprovalTask_aarti AS aprl
           INNER JOIN
           #TempTable_arti AS tta
           ON aprl.ApprovalTaskId = tta.ApprovalTaskId;
    DROP TABLE #TempTable_arti;
END 

       */


  CREATE PROCEDURE [dbo].[ChangeStatusToApprovedI]
@JsonEmployee NVARCHAR (MAX),
@ApproverEmail NVARCHAR(MAX)

AS
BEGIN
    CREATE TABLE #TempTable_arti (
        ApprovalTaskId INT PRIMARY KEY,
       ApprovalStatus NVARCHAR (255)

    );
    INSERT INTO #TempTable_arti (ApprovalTaskId, ApprovalStatus)
    SELECT ApprovalTaskId,
           'Approved'
    FROM   OPENJSON (@JsonEmployee) WITH (ApprovalTaskId INT '$.ApprovalTaskId');
    UPDATE aprl
    SET    aprl.ApprovalStatus = tta.ApprovalStatus
    FROM   ApprovalTask_aarti AS aprl
           INNER JOIN
           #TempTable_arti AS tta
           ON aprl.ApprovalTaskId = tta.ApprovalTaskId;
    DROP TABLE #TempTable_arti;

-- Complete status
DECLARE @ApproverId INT;
 
-- Get the ApproverId
SELECT @ApproverId = EmployeeId
FROM EmployeeMaster_arti
WHERE EmployeeEmail = @ApproverEmail;
 
-- Update StatusOfPlanning in EmployeeMaster_arti table
IF @ApproverId IS NOT NULL
BEGIN
    UPDATE [EmployeeMaster_arti]
    SET [StatusOfPlanning] = 'Completed'
    WHERE ApproverId = @ApproverId
END	
   
END 




select * from EmployeeMaster_arti

select * from ApprovalTask_aarti 

drop table  ApprovalTask_aarti 



--///////////////////////////////////// procedure to change approvalStatus from assigned to unassigned //////////////////////////////////////////////////////////////////////////
--/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



CREATE PROCEDURE [dbo].[ChangeStatusToUnassignedB]
AS
BEGIN
    -- Update ApprovalStatus to 'Unassigned' where it is currently 'Assigned'
    UPDATE ApprovalTask_aarti
    SET ApprovalStatus = 'Unassigned'
    WHERE ApprovalStatus = 'Assigned';
 
    -- Update StatusOfPlanning to 'Draft' where it is currently 'InProgress'
    UPDATE EmployeeMaster_arti
    SET StatusOfPlanning = 'draft'
    WHERE StatusOfPlanning = 'InProgress';
END